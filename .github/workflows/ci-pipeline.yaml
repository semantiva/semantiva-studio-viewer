name: CI Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Trigger the build job only on version tags (e.g., v1.0.0, v2.0.0)
  pull_request:
    branches:
      - main

env:
  project_name: semantiva_studio_viewer # Define a global variable for the project name
  python_version: '3.10.12'

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}

      - name: Install PDM
        run: |
          pip install pdm

      - name: Ensure version file exists
        run: |
          # Create version.txt for pdm version hook. Use tag if present, otherwise a dev placeholder.
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "__version__ = \"$VERSION\"" > version.txt
            echo "Created version.txt from tag: $(cat version.txt)"
          else
            echo "__version__ = \"0+ci\"" > version.txt
            echo "Created fallback version.txt: $(cat version.txt)"
          fi

      - name: Install dependencies using PDM
        run: |
          pdm install --dev

      - name: Run pylint
        run: |
          pdm run pylint ${{ env.project_name }} --fail-under=7.5

      - name: Run ruff
        run: |
          pdm run ruff check ${{ env.project_name }}

      - name: Run mypy
        run: |
          pdm run mypy .
          
      - name: Check license headers
        run: |
          pdm run python scripts/check_license_headers.py

      - name: Run black    
        run: |
          pdm run black --check ${{ env.project_name }}
    
  test:
    runs-on: ubuntu-latest
    needs: linting  # Ensure that the test job runs after linting job passes
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}

      - name: Install PDM
        run: |
          pip install pdm

      - name: Ensure version file exists
        run: |
          # Create version.txt for pdm version hook. Use tag if present, otherwise a dev placeholder.
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "__version__ = \"$VERSION\"" > version.txt
            echo "Created version.txt from tag: $(cat version.txt)"
          else
            echo "__version__ = \"0+ci\"" > version.txt
            echo "Created fallback version.txt: $(cat version.txt)"
          fi
      - name: Install dependencies using PDM
        run: |
          pdm install --dev

      - name: Run pytest with coverage report
        run: |
          pdm run coverage run -m pytest --maxfail=1 -q -s
        
      - name: Display coverage report
        run: |
          pdm run coverage report

  build:
    runs-on: ubuntu-latest
    needs: test  # Ensure the build job runs after the test job completes successfully
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/p/semantiva-studio-viewer
    
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Run only for tag pushes
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_version }}

      - name: Install PDM
        run: |
          pip install pdm

      - name: Create version file from tag
        run: |
          # If this job runs for a tag like refs/tags/v1.2.3, extract the version
          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "__version__ = \"$VERSION\"" > version.txt
            echo "Wrote version.txt -> $(cat version.txt)"
          else
            echo "Not a tag build; version.txt not created."
          fi

      - name: Install dependencies using PDM
        run: |
          pdm install --dev

      - name: Build the package
        run: |
          echo "Building package (version from version.txt if present)"
          pdm build  # Build the package (sdist and wheel)

      - name: Publish to PyPI
        run: |
          pdm publish --repository pypi
